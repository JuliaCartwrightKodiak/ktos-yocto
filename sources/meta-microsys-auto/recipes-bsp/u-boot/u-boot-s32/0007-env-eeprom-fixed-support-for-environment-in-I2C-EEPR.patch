From f8a5667842391a6d8d2dd679aecf4549ee787e26 Mon Sep 17 00:00:00 2001
From: Kay Potthoff <Kay.Potthoff@microsys.de>
Date: Tue, 16 Mar 2021 14:13:10 +0100
Subject: [PATCH 07/38] env: eeprom: fixed support for environment in
 I2C-EEPROM
Organization: MicroSys Electronics GmbH

Fixed support for environment in EEPROM using device tree.

Signed-off-by: Kay Potthoff <Kay.Potthoff@microsys.de>
---
 drivers/misc/i2c_eeprom.c | 46 +++++++++++++++++++++++------------
 env/Makefile              |  2 +-
 env/eeprom.c              | 51 +++++++++++++++++++++++++++++++++++++--
 include/i2c_eeprom.h      |  6 +++++
 4 files changed, 87 insertions(+), 18 deletions(-)

diff --git a/drivers/misc/i2c_eeprom.c b/drivers/misc/i2c_eeprom.c
index 6c0459dc555b..280432493056 100644
--- a/drivers/misc/i2c_eeprom.c
+++ b/drivers/misc/i2c_eeprom.c
@@ -59,23 +59,36 @@ static int i2c_eeprom_std_write(struct udevice *dev, int offset,
 				const uint8_t *buf, int size)
 {
     struct i2c_eeprom *priv = dev_get_priv(dev);
-	int ret;
-
-	while (size > 0) {
-		int write_size = min_t(int, size, priv->pagesize);
-
-		ret = dm_i2c_write(dev, offset, buf, write_size);
-		if (ret)
-			return ret;
-
-		offset += write_size;
-		buf += write_size;
-		size -= write_size;
-
-		udelay(10000);
+    int err = 0;
+    uint sz = (uint) size, s;
+    const uint8_t *src = buf;
+    uint a = (uint) offset;
+
+    const uint page_sz = (uint) priv->pagesize;
+
+    if (size<=0 || !buf) return 0;
+
+    while ((err == 0) && (sz > 0)) {
+        if ((a % page_sz) != 0) {
+            s = sz < (page_sz - (a % page_sz)) ? sz : (page_sz - (a % page_sz));
+            err = dm_i2c_write(dev, a, src, s);
+            sz -= s;
+            src += s;
+            a += s;
+        } else if (sz > page_sz) {
+            err = dm_i2c_write(dev, a, src, page_sz);
+            sz -= page_sz;
+            src += page_sz;
+            a += page_sz;
+        } else {
+            err = dm_i2c_write(dev, a, src, sz);
+            sz = 0;
+        }
+        if (priv->page_write_delay > 0)
+            udelay(priv->page_write_delay);
     }

-	return 0;
+    return err;
 }

 static int i2c_eeprom_std_size(struct udevice *dev)
@@ -101,12 +114,15 @@ static int i2c_eeprom_std_ofdata_to_platdata(struct udevice *dev)

 	if (dev_read_u32(dev, "pagesize", &pagesize) == 0) {
 		priv->pagesize = pagesize;
+		priv->pagewidth = ffs(priv->pagesize)-1;
 	} else {
 		/* 6 bit -> page size of up to 2^63 (should be sufficient) */
 		priv->pagewidth = data->pagewidth;
 		priv->pagesize = (1 << priv->pagewidth);
 	}

+	priv->page_write_delay = dev_read_u32_default(dev, "page-write-delay", 5000);
+
 	if (dev_read_u32(dev, "size", &size) == 0)
 		priv->size = size;
 	else
diff --git a/env/Makefile b/env/Makefile
index e2a165b8f1bf..0b9c099f775f 100644
--- a/env/Makefile
+++ b/env/Makefile
@@ -12,7 +12,7 @@ obj-$(CONFIG_$(SPL_TPL_)ENV_SUPPORT) += callback.o
 ifndef CONFIG_SPL_BUILD
 obj-$(CONFIG_ENV_IS_IN_EEPROM) += eeprom.o
 extra-$(CONFIG_ENV_IS_EMBEDDED) += embedded.o
-obj-$(CONFIG_ENV_IS_IN_EEPROM) += embedded.o
+#obj-$(CONFIG_ENV_IS_IN_EEPROM) += embedded.o
 extra-$(CONFIG_ENV_IS_IN_FLASH) += embedded.o
 obj-$(CONFIG_ENV_IS_IN_NVRAM) += embedded.o
 obj-$(CONFIG_ENV_IS_IN_NVRAM) += nvram.o
diff --git a/env/eeprom.c b/env/eeprom.c
index e8126cfe3974..923f97381618 100644
--- a/env/eeprom.c
+++ b/env/eeprom.c
@@ -17,6 +17,9 @@
 #if defined(CONFIG_I2C_ENV_EEPROM_BUS)
 #include <i2c.h>
 #endif
+#ifdef CONFIG_DM_I2C
+#include <i2c_eeprom.h>
+#endif
 #include <search.h>
 #include <errno.h>
 #include <linux/compiler.h>	/* for BUG_ON */
@@ -27,6 +30,9 @@ static int eeprom_bus_read(unsigned dev_addr, unsigned offset,
 			   uchar *buffer, unsigned cnt)
 {
 	int rcode;
+
+#ifndef CONFIG_DM_I2C
+    unsigned int cur_speed;
 #if defined(CONFIG_I2C_ENV_EEPROM_BUS)
 	int old_bus = i2c_get_bus_num();

@@ -34,11 +40,27 @@ static int eeprom_bus_read(unsigned dev_addr, unsigned offset,
 		i2c_set_bus_num(CONFIG_I2C_ENV_EEPROM_BUS);
 #endif

+    cur_speed = i2c_get_bus_speed();
+
+    if (cur_speed != EEPROM_I2C_SPEED)
+        i2c_set_bus_speed(EEPROM_I2C_SPEED);
+
     rcode = eeprom_read(dev_addr, offset, buffer, cnt);

+    if (cur_speed != EEPROM_I2C_SPEED)
+        i2c_set_bus_speed(cur_speed);
+
 #if defined(CONFIG_I2C_ENV_EEPROM_BUS)
+    if (old_bus != CONFIG_I2C_ENV_EEPROM_BUS)
         i2c_set_bus_num(old_bus);
 #endif
+#else
+    struct udevice *dev;
+    rcode = i2c_get_chip_for_busnum(CONFIG_I2C_ENV_EEPROM_BUS,
+            dev_addr, CONFIG_SYS_I2C_EEPROM_ADDR_LEN, &dev);
+    if (!rcode)
+        rcode = i2c_eeprom_read(dev, offset, buffer, cnt);
+#endif

 	return rcode;
 }
@@ -47,6 +69,9 @@ static int eeprom_bus_write(unsigned dev_addr, unsigned offset,
 			    uchar *buffer, unsigned cnt)
 {
 	int rcode;
+
+#ifndef CONFIG_DM_I2C
+	unsigned int cur_speed;
 #if defined(CONFIG_I2C_ENV_EEPROM_BUS)
 	int old_bus = i2c_get_bus_num();

@@ -54,11 +79,27 @@ static int eeprom_bus_write(unsigned dev_addr, unsigned offset,
 		i2c_set_bus_num(CONFIG_I2C_ENV_EEPROM_BUS);
 #endif

+    cur_speed = i2c_get_bus_speed();
+
+    if (cur_speed != EEPROM_I2C_SPEED)
+        i2c_set_bus_speed(EEPROM_I2C_SPEED);
+
     rcode = eeprom_write(dev_addr, offset, buffer, cnt);

+    if (cur_speed != EEPROM_I2C_SPEED)
+        i2c_set_bus_speed(cur_speed);
+
 #if defined(CONFIG_I2C_ENV_EEPROM_BUS)
+    if (old_bus != CONFIG_I2C_ENV_EEPROM_BUS)
         i2c_set_bus_num(old_bus);
 #endif
+#else
+    struct udevice *dev;
+    rcode = i2c_get_chip_for_busnum(CONFIG_I2C_ENV_EEPROM_BUS,
+            dev_addr, CONFIG_SYS_I2C_EEPROM_ADDR_LEN, &dev);
+    if (!rcode)
+        rcode = i2c_eeprom_write(dev, offset, buffer, cnt);
+#endif

 	return rcode;
 }
@@ -85,6 +126,7 @@ static int env_eeprom_load(void)
 {
 	char buf_env[CONFIG_ENV_SIZE];
 	unsigned int off = CONFIG_ENV_OFFSET;
+    int rc;

 #ifdef CONFIG_ENV_OFFSET_REDUND
 	ulong len, crc[2], crc_tmp;
@@ -148,7 +190,7 @@ static int env_eeprom_load(void)
 			gd->env_valid = ENV_VALID;
 	}

-#else /* CONFIG_ENV_OFFSET_REDUND */
+#elif 0 /* CONFIG_ENV_OFFSET_REDUND */
 	ulong crc, len, new;
 	uchar rdbuf[64];

@@ -188,7 +230,12 @@ static int env_eeprom_load(void)
 	eeprom_bus_read(CONFIG_SYS_DEF_EEPROM_ADDR,
 		off, (uchar *)buf_env, CONFIG_ENV_SIZE);

-	return env_import(buf_env, 1);
+	rc = env_import(buf_env, 1);
+
+	if (rc == 0) gd->env_valid = ENV_VALID;
+	else gd->env_valid = ENV_INVALID;
+
+	return rc;
 }

 static int env_eeprom_save(void)
diff --git a/include/i2c_eeprom.h b/include/i2c_eeprom.h
index b96254ae79f5..98e3e169e8cb 100644
--- a/include/i2c_eeprom.h
+++ b/include/i2c_eeprom.h
@@ -1,6 +1,10 @@
 /* SPDX-License-Identifier: GPL-2.0+ */
 /*
  * Copyright (c) 2014 Google, Inc
+ *
+ * Copyright (C) 2019 MicroSys Electronics GmbH
+ *   Implemented i2c_eeprom_std_write(). Parameters are
+ *   read from the devicetree.
  */

 #ifndef __I2C_EEPROM
@@ -20,6 +24,8 @@ struct i2c_eeprom {
 	unsigned pagewidth;
 	/* The EEPROM's capacity in bytes */
 	unsigned long size;
+	/* The EEPROM's page write delay in microseconds */
+	unsigned long page_write_delay;
 };

 /*
--
2.30.2

